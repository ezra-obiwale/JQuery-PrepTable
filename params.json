{
  "name": "JQuery-Table",
  "tagline": "A JQuery function to load data into the table and to search, order, and paginate the data.",
  "body": "This was created as an alternative to the JQuery DataTable because of the excessive errors gotten from there. This library is a lot easier and cleaner to use.\r\n\r\n## Usage\r\nAdd the following to your web page as shown below\r\n````html\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"/path/to/jquery-table.min.css\" />\r\n    </head>\r\n    <body>\r\n        <table>\r\n            <thead> <!-- not required -->\r\n                <tr>\r\n                    <th>First Name</th>\r\n                    <th>Last Name</th>\r\n                    <th>Gender</th>\r\n                </tr>\r\n            </thead>\r\n        </table>\r\n        <script src=\"/path/to/jquery.js\"></script>\r\n        <script src=\"/path/to/jquery-table.min.js\"></script>\r\n        <script>\r\n            $('table').table({\r\n                data: [\r\n                    ['Ezra','Obiwale','Male'],\r\n                    ['Annie','DiMaria','Female'],\r\n                    ['Sandy','Stone','Female'],\r\n                ]\r\n            });\r\n        </script>\r\n    </body>\r\n</html>\r\n````\r\n## Configuration\r\n````js\r\nvar config = {\r\n        columns: [],\r\n        data: [],\r\n        ajax: null,\r\n        append: false,\r\n        limits: {values: [10, 20, 50, 100, 200], all: true, default: 10},\r\n        searchable: true,\r\n        label: true,\r\n        pagination: {\r\n            firstLast: false,\r\n            nextPrevious: true,\r\n            numbers: false,\r\n            maxButtons: 12\r\n        },\r\n        loading_message: 'Loading table...',\r\n        empty_message: 'NO ENTRIES FOUND.',\r\n        display_errors: false,\r\n        log_errors: true,\r\n        log_data: false,\r\n        alert_errors: true,\r\n        createRow: function (row, data, index) {}\r\n    };\r\n$('table').table(config);\r\n````\r\n\r\nproperty|value|default|description\r\n--------|-----|-------|-----------\r\najax|string\\|object|null|A string path to the location of the data or an object with 2 string properties - url and type, which may be `'get'` or `'post'`.\r\nalert_errors|boolean|true|Indicates whether to alert any errors in operation.\r\nappend|boolean|false|Indicates whether to append new rows to existing ones.\r\ncolumns|array|empty array|An OPTIONAL array of objects containing information about the property to map to the `<td>` in each data row. Each object must have a string `data` property with the data object property as the value. This is only used by the default `createRow` function. Optionally, each object may also have boolean `sortable` and `searchable` properties indicating where the column should be sortable and searchable respectively.\r\ncreateRow|function|function|The function to call to create each row data. Three parameters are passed into the function - the row object, the current data to use in creating the row, and the index of the data. The `this` object is the table.\r\ndata|array|empty array|The array of objects or arrays to load into the table.\r\ndisplay_errors|boolean|false|Indicates whether to display errors on the DOM.\r\nempty_message|string|'NO ENTRIES FOUND.'|The message to show when no entries are found.\r\nlabel|boolean|true|Indicates whether to show the label which contains information about the total possible rows and the number of rows current showing.\r\nlimits|object\\|boolean|object|Properties include `values`, which is an array of integers to use as limits, `all`, which is a boolean indicating whether to add the option to fetch all data, and `default`, which is the default limit value to use. To set the `all` as default, set `default` to `'all'`. If set to `false`, then limits are turned off.\r\nloading_message|string|'Loading table ...'|The message to show while loading the rows.\r\nlog_data|boolean|false|Indicates whether to log the received data in an ajax operation to the console.\r\nlog_errors|boolean|true|Indicates whether to log errors encountered to the console.\r\npagination|object\\|boolean|object|Properties include boolean `firstLast`, which indicates whether to show the First and Last buttons, boolean `nextPrevious`, which indicates whether to show the Next and Previous buttons, boolean numbers, which indicates whether to show number buttons, and integer `maxButtons`, which indicates the maximum number of buttons allowed, including the First, Last, Next and Previous buttons if enabled. This defaults to 12. If set to `false`, pagination is turned off.\r\nsearchable|boolean|true|Indicates whether the table should be searchable.\r\n\r\n## Using DOM Dataset\r\n\r\ndata|value|description\r\n----|-----|-----------\r\ndata-ajax-url|string|A string path to the location of the data.\r\ndata-ajax-type|string|A string which may be `'get'` or `'post'`.\r\ndata-alert-errors|boolean|Indicates whether to alert any errors in operation.\r\ndata-append|boolean|Indicates whether to append new rows to existing ones.\r\ndata-create-row|string|The name of the function to call to create each row data.\r\ndata-display-errors|boolean|Indicates whether to display errors on the DOM.\r\ndata-empty-message|string|The message to show when no entries are found.\r\ndata-label|boolean|Indicates whether to show the label which contains information about the total possible rows and the number of rows current showing.\r\ndata-limits|boolean|`false` turns off limits.\r\ndata-limits-values|string|A comma separated string of integers.\r\ndata-limits-all|boolean|Indicates whether to add the option to fetch all data.\r\ndata-limits-default|integer\\|string|The default limit value to use. To set the `all` as default, set to `'all'`.\r\ndata-loading-message|string|The message to show while loading the rows.\r\ndata-log-data|boolean|Indicates whether to log the received data in an ajax operation to the console.\r\ndata-log-errors|boolean|Indicates whether to log errors encountered to the console.\r\ndata-pagination|boolean|`false` turns off pagination.\r\ndata-pagination-first-last|boolean|Indicates whether to show the First and Last buttons.\r\ndata-pagination-next-previous|boolean|Indicates whether to show the Next and Previous buttons.\r\ndata-pagination-numbers|boolean|Indicates whether to show number buttons.\r\ndata-pagination-max-button|integer|Indicates the maximum number of buttons allowed, including the First, Last, Next and Previous buttons if enabled. This defaults to 12.\r\ndata-searchable|boolean|Indicates whether the table should be searchable.\r\n\r\n## Ajax\r\n\r\n### Request\r\nWhen fetching data by ajax, the following variables are sent to the page to aid in fetching the right data.\r\n\r\nVariable|Value|Description\r\n--------|-----|-----------\r\nlimit|integer|The number of rows to fetch\r\norder|array|Keys include `column`, which is the column to order the data by, and `dir`, which indicates the direction to order the data. `dir` values may be either `'asc'` or `'desc'`.\r\nsearch|array|Keys include `columns`, which is a comma-separated string of columns to search based on `searchable` option set for each column, and `value`, which is the string being searched.\r\nstart|integer|The number of row to start fetching the data from\r\n\r\n### Response\r\nA `JSON` object response is expected with the following properties.\r\n\r\nProperty|Value|Description\r\n--------|-----|-----------\r\ndata|array|Array of row objects fetched according to the request\r\ntotal|integer|The number of all possible rows to fetch\r\n\r\n## Errors\r\nCode|Message|Explanation\r\n----|-------|-----------\r\n**T0**|Error in connection \\[responseText\\]|This error is generated if there's an error in connecting to the ajax url provided\r\n**T1**|Response data must be an object|The response data must be an object. See [Response](#response).\r\n**T2**|Response object must contain key `<total>` with an `<integer value>`|The response object must have property `total` with an integer value. See [Response](#response)\r\n**T3**|Data in `<Response>` must be an array|The `data` property of the response object must be an array. See [Response](#response).\r\n**T4**|DATA.data[`<index>`] must be either an array or an object|This means the data with the given index is not an array or object and should be either. See [Response](#response).",
  "google": "UA-75126891-2",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}